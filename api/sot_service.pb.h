// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sot_service.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_sot_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sot_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sot_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_sot_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_sot_5fservice_2eproto;
namespace core_ips {
namespace sot {
class BBox;
struct BBoxDefaultTypeInternal;
extern BBoxDefaultTypeInternal _BBox_default_instance_;
class SotInfo;
struct SotInfoDefaultTypeInternal;
extern SotInfoDefaultTypeInternal _SotInfo_default_instance_;
class TrackRequest;
struct TrackRequestDefaultTypeInternal;
extern TrackRequestDefaultTypeInternal _TrackRequest_default_instance_;
class TrackResponse;
struct TrackResponseDefaultTypeInternal;
extern TrackResponseDefaultTypeInternal _TrackResponse_default_instance_;
}  // namespace sot
}  // namespace core_ips
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace core_ips {
namespace sot {
enum TrackResponse_State : int {
  TrackResponse_State_NONE = 0,
  TrackResponse_State_NORMAL = 1,
  TrackResponse_State_INTERRUPTED = 2,
  TrackResponse_State_NOT_ENOUGH_RESOURCES = 3,
  TrackResponse_State_VIDEO_DISCONNECTED = 4,
  TrackResponse_State_TrackResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrackResponse_State_TrackResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrackResponse_State_IsValid(int value);
extern const uint32_t TrackResponse_State_internal_data_[];
constexpr TrackResponse_State TrackResponse_State_State_MIN = static_cast<TrackResponse_State>(0);
constexpr TrackResponse_State TrackResponse_State_State_MAX = static_cast<TrackResponse_State>(4);
constexpr int TrackResponse_State_State_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TrackResponse_State_descriptor();
template <typename T>
const std::string& TrackResponse_State_Name(T value) {
  static_assert(std::is_same<T, TrackResponse_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return TrackResponse_State_Name(static_cast<TrackResponse_State>(value));
}
template <>
inline const std::string& TrackResponse_State_Name(TrackResponse_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackResponse_State_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TrackResponse_State_Parse(absl::string_view name, TrackResponse_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackResponse_State>(
      TrackResponse_State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BBox final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core_ips.sot.BBox) */ {
 public:
  inline BBox() : BBox(nullptr) {}
  ~BBox() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BBox(
      ::google::protobuf::internal::ConstantInitialized);

  inline BBox(const BBox& from) : BBox(nullptr, from) {}
  inline BBox(BBox&& from) noexcept
      : BBox(nullptr, std::move(from)) {}
  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox& operator=(BBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox* internal_default_instance() {
    return reinterpret_cast<const BBox*>(
        &_BBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BBox& a, BBox& b) { a.Swap(&b); }
  inline void Swap(BBox* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BBox>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BBox& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BBox& from) { BBox::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BBox* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core_ips.sot.BBox"; }

 protected:
  explicit BBox(::google::protobuf::Arena* arena);
  BBox(::google::protobuf::Arena* arena, const BBox& from);
  BBox(::google::protobuf::Arena* arena, BBox&& from) noexcept
      : BBox(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXtlFieldNumber = 1,
    kYtlFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // float xtl = 1;
  void clear_xtl() ;
  float xtl() const;
  void set_xtl(float value);

  private:
  float _internal_xtl() const;
  void _internal_set_xtl(float value);

  public:
  // float ytl = 2;
  void clear_ytl() ;
  float ytl() const;
  void set_ytl(float value);

  private:
  float _internal_ytl() const;
  void _internal_set_ytl(float value);

  public:
  // float width = 3;
  void clear_width() ;
  float width() const;
  void set_width(float value);

  private:
  float _internal_width() const;
  void _internal_set_width(float value);

  public:
  // float height = 4;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // @@protoc_insertion_point(class_scope:core_ips.sot.BBox)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BBox_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BBox& from_msg);
    float xtl_;
    float ytl_;
    float width_;
    float height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TrackRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core_ips.sot.TrackRequest) */ {
 public:
  inline TrackRequest() : TrackRequest(nullptr) {}
  ~TrackRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrackRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TrackRequest(const TrackRequest& from) : TrackRequest(nullptr, from) {}
  inline TrackRequest(TrackRequest&& from) noexcept
      : TrackRequest(nullptr, std::move(from)) {}
  inline TrackRequest& operator=(const TrackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackRequest& operator=(TrackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackRequest* internal_default_instance() {
    return reinterpret_cast<const TrackRequest*>(
        &_TrackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TrackRequest& a, TrackRequest& b) { a.Swap(&b); }
  inline void Swap(TrackRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TrackRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrackRequest& from) { TrackRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core_ips.sot.TrackRequest"; }

 protected:
  explicit TrackRequest(::google::protobuf::Arena* arena);
  TrackRequest(::google::protobuf::Arena* arena, const TrackRequest& from);
  TrackRequest(::google::protobuf::Arena* arena, TrackRequest&& from) noexcept
      : TrackRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInitBboxFieldNumber = 1,
  };
  // .core_ips.sot.BBox init_bbox = 1;
  bool has_init_bbox() const;
  void clear_init_bbox() ;
  const ::core_ips::sot::BBox& init_bbox() const;
  PROTOBUF_NODISCARD ::core_ips::sot::BBox* release_init_bbox();
  ::core_ips::sot::BBox* mutable_init_bbox();
  void set_allocated_init_bbox(::core_ips::sot::BBox* value);
  void unsafe_arena_set_allocated_init_bbox(::core_ips::sot::BBox* value);
  ::core_ips::sot::BBox* unsafe_arena_release_init_bbox();

  private:
  const ::core_ips::sot::BBox& _internal_init_bbox() const;
  ::core_ips::sot::BBox* _internal_mutable_init_bbox();

  public:
  // @@protoc_insertion_point(class_scope:core_ips.sot.TrackRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TrackRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TrackRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::core_ips::sot::BBox* init_bbox_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SotInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core_ips.sot.SotInfo) */ {
 public:
  inline SotInfo() : SotInfo(nullptr) {}
  ~SotInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SotInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SotInfo(const SotInfo& from) : SotInfo(nullptr, from) {}
  inline SotInfo(SotInfo&& from) noexcept
      : SotInfo(nullptr, std::move(from)) {}
  inline SotInfo& operator=(const SotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SotInfo& operator=(SotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SotInfo* internal_default_instance() {
    return reinterpret_cast<const SotInfo*>(
        &_SotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SotInfo& a, SotInfo& b) { a.Swap(&b); }
  inline void Swap(SotInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SotInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SotInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SotInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SotInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SotInfo& from) { SotInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SotInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core_ips.sot.SotInfo"; }

 protected:
  explicit SotInfo(::google::protobuf::Arena* arena);
  SotInfo(::google::protobuf::Arena* arena, const SotInfo& from);
  SotInfo(::google::protobuf::Arena* arena, SotInfo&& from) noexcept
      : SotInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBboxFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // .core_ips.sot.BBox bbox = 1;
  bool has_bbox() const;
  void clear_bbox() ;
  const ::core_ips::sot::BBox& bbox() const;
  PROTOBUF_NODISCARD ::core_ips::sot::BBox* release_bbox();
  ::core_ips::sot::BBox* mutable_bbox();
  void set_allocated_bbox(::core_ips::sot::BBox* value);
  void unsafe_arena_set_allocated_bbox(::core_ips::sot::BBox* value);
  ::core_ips::sot::BBox* unsafe_arena_release_bbox();

  private:
  const ::core_ips::sot::BBox& _internal_bbox() const;
  ::core_ips::sot::BBox* _internal_mutable_bbox();

  public:
  // float score = 2;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // @@protoc_insertion_point(class_scope:core_ips.sot.SotInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SotInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SotInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::core_ips::sot::BBox* bbox_;
    float score_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sot_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TrackResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:core_ips.sot.TrackResponse) */ {
 public:
  inline TrackResponse() : TrackResponse(nullptr) {}
  ~TrackResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrackResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TrackResponse(const TrackResponse& from) : TrackResponse(nullptr, from) {}
  inline TrackResponse(TrackResponse&& from) noexcept
      : TrackResponse(nullptr, std::move(from)) {}
  inline TrackResponse& operator=(const TrackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackResponse& operator=(TrackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackResponse* internal_default_instance() {
    return reinterpret_cast<const TrackResponse*>(
        &_TrackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TrackResponse& a, TrackResponse& b) { a.Swap(&b); }
  inline void Swap(TrackResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TrackResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrackResponse& from) { TrackResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "core_ips.sot.TrackResponse"; }

 protected:
  explicit TrackResponse(::google::protobuf::Arena* arena);
  TrackResponse(::google::protobuf::Arena* arena, const TrackResponse& from);
  TrackResponse(::google::protobuf::Arena* arena, TrackResponse&& from) noexcept
      : TrackResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using State = TrackResponse_State;
  static constexpr State NONE = TrackResponse_State_NONE;
  static constexpr State NORMAL = TrackResponse_State_NORMAL;
  static constexpr State INTERRUPTED = TrackResponse_State_INTERRUPTED;
  static constexpr State NOT_ENOUGH_RESOURCES = TrackResponse_State_NOT_ENOUGH_RESOURCES;
  static constexpr State VIDEO_DISCONNECTED = TrackResponse_State_VIDEO_DISCONNECTED;
  static inline bool State_IsValid(int value) {
    return TrackResponse_State_IsValid(value);
  }
  static constexpr State State_MIN = TrackResponse_State_State_MIN;
  static constexpr State State_MAX = TrackResponse_State_State_MAX;
  static constexpr int State_ARRAYSIZE = TrackResponse_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return TrackResponse_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return TrackResponse_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return TrackResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .core_ips.sot.SotInfo result = 2;
  bool has_result() const;
  void clear_result() ;
  const ::core_ips::sot::SotInfo& result() const;
  PROTOBUF_NODISCARD ::core_ips::sot::SotInfo* release_result();
  ::core_ips::sot::SotInfo* mutable_result();
  void set_allocated_result(::core_ips::sot::SotInfo* value);
  void unsafe_arena_set_allocated_result(::core_ips::sot::SotInfo* value);
  ::core_ips::sot::SotInfo* unsafe_arena_release_result();

  private:
  const ::core_ips::sot::SotInfo& _internal_result() const;
  ::core_ips::sot::SotInfo* _internal_mutable_result();

  public:
  // .core_ips.sot.TrackResponse.State state = 1;
  void clear_state() ;
  ::core_ips::sot::TrackResponse_State state() const;
  void set_state(::core_ips::sot::TrackResponse_State value);

  private:
  ::core_ips::sot::TrackResponse_State _internal_state() const;
  void _internal_set_state(::core_ips::sot::TrackResponse_State value);

  public:
  // @@protoc_insertion_point(class_scope:core_ips.sot.TrackResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TrackResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TrackResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::core_ips::sot::SotInfo* result_;
    int state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sot_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BBox

// float xtl = 1;
inline void BBox::clear_xtl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtl_ = 0;
}
inline float BBox::xtl() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.BBox.xtl)
  return _internal_xtl();
}
inline void BBox::set_xtl(float value) {
  _internal_set_xtl(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.BBox.xtl)
}
inline float BBox::_internal_xtl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xtl_;
}
inline void BBox::_internal_set_xtl(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtl_ = value;
}

// float ytl = 2;
inline void BBox::clear_ytl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ytl_ = 0;
}
inline float BBox::ytl() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.BBox.ytl)
  return _internal_ytl();
}
inline void BBox::set_ytl(float value) {
  _internal_set_ytl(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.BBox.ytl)
}
inline float BBox::_internal_ytl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ytl_;
}
inline void BBox::_internal_set_ytl(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ytl_ = value;
}

// float width = 3;
inline void BBox::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
}
inline float BBox::width() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.BBox.width)
  return _internal_width();
}
inline void BBox::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.BBox.width)
}
inline float BBox::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void BBox::_internal_set_width(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// float height = 4;
inline void BBox::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
}
inline float BBox::height() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.BBox.height)
  return _internal_height();
}
inline void BBox::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.BBox.height)
}
inline float BBox::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void BBox::_internal_set_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// SotInfo

// .core_ips.sot.BBox bbox = 1;
inline bool SotInfo::has_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbox_ != nullptr);
  return value;
}
inline void SotInfo::clear_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bbox_ != nullptr) _impl_.bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::core_ips::sot::BBox& SotInfo::_internal_bbox() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::core_ips::sot::BBox* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::core_ips::sot::BBox&>(::core_ips::sot::_BBox_default_instance_);
}
inline const ::core_ips::sot::BBox& SotInfo::bbox() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core_ips.sot.SotInfo.bbox)
  return _internal_bbox();
}
inline void SotInfo::unsafe_arena_set_allocated_bbox(::core_ips::sot::BBox* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core_ips.sot.SotInfo.bbox)
}
inline ::core_ips::sot::BBox* SotInfo::release_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::BBox* released = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::core_ips::sot::BBox* SotInfo::unsafe_arena_release_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core_ips.sot.SotInfo.bbox)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::BBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::core_ips::sot::BBox* SotInfo::_internal_mutable_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bbox_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::core_ips::sot::BBox>(GetArena());
    _impl_.bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(p);
  }
  return _impl_.bbox_;
}
inline ::core_ips::sot::BBox* SotInfo::mutable_bbox() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::core_ips::sot::BBox* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:core_ips.sot.SotInfo.bbox)
  return _msg;
}
inline void SotInfo::set_allocated_bbox(::core_ips::sot::BBox* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.bbox_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(value);
  // @@protoc_insertion_point(field_set_allocated:core_ips.sot.SotInfo.bbox)
}

// float score = 2;
inline void SotInfo::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0;
}
inline float SotInfo::score() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.SotInfo.score)
  return _internal_score();
}
inline void SotInfo::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.SotInfo.score)
}
inline float SotInfo::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void SotInfo::_internal_set_score(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// -------------------------------------------------------------------

// TrackRequest

// .core_ips.sot.BBox init_bbox = 1;
inline bool TrackRequest::has_init_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.init_bbox_ != nullptr);
  return value;
}
inline void TrackRequest::clear_init_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.init_bbox_ != nullptr) _impl_.init_bbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::core_ips::sot::BBox& TrackRequest::_internal_init_bbox() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::core_ips::sot::BBox* p = _impl_.init_bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::core_ips::sot::BBox&>(::core_ips::sot::_BBox_default_instance_);
}
inline const ::core_ips::sot::BBox& TrackRequest::init_bbox() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core_ips.sot.TrackRequest.init_bbox)
  return _internal_init_bbox();
}
inline void TrackRequest::unsafe_arena_set_allocated_init_bbox(::core_ips::sot::BBox* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.init_bbox_);
  }
  _impl_.init_bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core_ips.sot.TrackRequest.init_bbox)
}
inline ::core_ips::sot::BBox* TrackRequest::release_init_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::BBox* released = _impl_.init_bbox_;
  _impl_.init_bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::core_ips::sot::BBox* TrackRequest::unsafe_arena_release_init_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core_ips.sot.TrackRequest.init_bbox)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::BBox* temp = _impl_.init_bbox_;
  _impl_.init_bbox_ = nullptr;
  return temp;
}
inline ::core_ips::sot::BBox* TrackRequest::_internal_mutable_init_bbox() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.init_bbox_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::core_ips::sot::BBox>(GetArena());
    _impl_.init_bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(p);
  }
  return _impl_.init_bbox_;
}
inline ::core_ips::sot::BBox* TrackRequest::mutable_init_bbox() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::core_ips::sot::BBox* _msg = _internal_mutable_init_bbox();
  // @@protoc_insertion_point(field_mutable:core_ips.sot.TrackRequest.init_bbox)
  return _msg;
}
inline void TrackRequest::set_allocated_init_bbox(::core_ips::sot::BBox* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.init_bbox_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.init_bbox_ = reinterpret_cast<::core_ips::sot::BBox*>(value);
  // @@protoc_insertion_point(field_set_allocated:core_ips.sot.TrackRequest.init_bbox)
}

// -------------------------------------------------------------------

// TrackResponse

// .core_ips.sot.TrackResponse.State state = 1;
inline void TrackResponse::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::core_ips::sot::TrackResponse_State TrackResponse::state() const {
  // @@protoc_insertion_point(field_get:core_ips.sot.TrackResponse.state)
  return _internal_state();
}
inline void TrackResponse::set_state(::core_ips::sot::TrackResponse_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:core_ips.sot.TrackResponse.state)
}
inline ::core_ips::sot::TrackResponse_State TrackResponse::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::core_ips::sot::TrackResponse_State>(_impl_.state_);
}
inline void TrackResponse::_internal_set_state(::core_ips::sot::TrackResponse_State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// .core_ips.sot.SotInfo result = 2;
inline bool TrackResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline void TrackResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::core_ips::sot::SotInfo& TrackResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::core_ips::sot::SotInfo* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::core_ips::sot::SotInfo&>(::core_ips::sot::_SotInfo_default_instance_);
}
inline const ::core_ips::sot::SotInfo& TrackResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:core_ips.sot.TrackResponse.result)
  return _internal_result();
}
inline void TrackResponse::unsafe_arena_set_allocated_result(::core_ips::sot::SotInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::core_ips::sot::SotInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:core_ips.sot.TrackResponse.result)
}
inline ::core_ips::sot::SotInfo* TrackResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::SotInfo* released = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::core_ips::sot::SotInfo* TrackResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:core_ips.sot.TrackResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::core_ips::sot::SotInfo* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::core_ips::sot::SotInfo* TrackResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::core_ips::sot::SotInfo>(GetArena());
    _impl_.result_ = reinterpret_cast<::core_ips::sot::SotInfo*>(p);
  }
  return _impl_.result_;
}
inline ::core_ips::sot::SotInfo* TrackResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::core_ips::sot::SotInfo* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:core_ips.sot.TrackResponse.result)
  return _msg;
}
inline void TrackResponse::set_allocated_result(::core_ips::sot::SotInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::core_ips::sot::SotInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:core_ips.sot.TrackResponse.result)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sot
}  // namespace core_ips


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::core_ips::sot::TrackResponse_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::core_ips::sot::TrackResponse_State>() {
  return ::core_ips::sot::TrackResponse_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sot_5fservice_2eproto_2epb_2eh
