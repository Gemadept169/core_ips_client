// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sot_service.proto

#include "sot_service.pb.h"
#include "sot_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace core_ips {
namespace sot {

static const char* Sot_method_names[] = {
  "/core_ips.sot.Sot/TrackStart",
  "/core_ips.sot.Sot/TrackStop",
};

std::unique_ptr< Sot::Stub> Sot::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sot::Stub> stub(new Sot::Stub(channel, options));
  return stub;
}

Sot::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TrackStart_(Sot_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TrackStop_(Sot_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::core_ips::sot::TrackResponse>* Sot::Stub::TrackStartRaw(::grpc::ClientContext* context, const ::core_ips::sot::TrackRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::core_ips::sot::TrackResponse>::Create(channel_.get(), rpcmethod_TrackStart_, context, request);
}

void Sot::Stub::async::TrackStart(::grpc::ClientContext* context, const ::core_ips::sot::TrackRequest* request, ::grpc::ClientReadReactor< ::core_ips::sot::TrackResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::core_ips::sot::TrackResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_TrackStart_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::core_ips::sot::TrackResponse>* Sot::Stub::AsyncTrackStartRaw(::grpc::ClientContext* context, const ::core_ips::sot::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::core_ips::sot::TrackResponse>::Create(channel_.get(), cq, rpcmethod_TrackStart_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::core_ips::sot::TrackResponse>* Sot::Stub::PrepareAsyncTrackStartRaw(::grpc::ClientContext* context, const ::core_ips::sot::TrackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::core_ips::sot::TrackResponse>::Create(channel_.get(), cq, rpcmethod_TrackStart_, context, request, false, nullptr);
}

::grpc::Status Sot::Stub::TrackStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TrackStop_, context, request, response);
}

void Sot::Stub::async::TrackStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrackStop_, context, request, response, std::move(f));
}

void Sot::Stub::async::TrackStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrackStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sot::Stub::PrepareAsyncTrackStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TrackStop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Sot::Stub::AsyncTrackStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrackStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

Sot::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sot_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sot::Service, ::core_ips::sot::TrackRequest, ::core_ips::sot::TrackResponse>(
          [](Sot::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core_ips::sot::TrackRequest* req,
             ::grpc::ServerWriter<::core_ips::sot::TrackResponse>* writer) {
               return service->TrackStart(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sot_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sot::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sot::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->TrackStop(ctx, req, resp);
             }, this)));
}

Sot::Service::~Service() {
}

::grpc::Status Sot::Service::TrackStart(::grpc::ServerContext* context, const ::core_ips::sot::TrackRequest* request, ::grpc::ServerWriter< ::core_ips::sot::TrackResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sot::Service::TrackStop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core_ips
}  // namespace sot

