// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sot_service.proto
// Protobuf C++ Version: 5.27.2

#include "sot_service.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace core_ips {
namespace sot {

inline constexpr BBox::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : xtl_{0},
        ytl_{0},
        width_{0},
        height_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BBox::BBox(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BBoxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BBoxDefaultTypeInternal() {}
  union {
    BBox _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BBoxDefaultTypeInternal _BBox_default_instance_;

inline constexpr TrackRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        init_bbox_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrackRequest::TrackRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackRequestDefaultTypeInternal() {}
  union {
    TrackRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackRequestDefaultTypeInternal _TrackRequest_default_instance_;

inline constexpr SotInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bbox_{nullptr},
        score_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SotInfo::SotInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SotInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SotInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SotInfoDefaultTypeInternal() {}
  union {
    SotInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SotInfoDefaultTypeInternal _SotInfo_default_instance_;

inline constexpr TrackResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_{nullptr},
        state_{static_cast< ::core_ips::sot::TrackResponse_State >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrackResponse::TrackResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrackResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackResponseDefaultTypeInternal() {}
  union {
    TrackResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackResponseDefaultTypeInternal _TrackResponse_default_instance_;
}  // namespace sot
}  // namespace core_ips
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sot_5fservice_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sot_5fservice_2eproto = nullptr;
const ::uint32_t
    TableStruct_sot_5fservice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::BBox, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::BBox, _impl_.xtl_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::BBox, _impl_.ytl_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::BBox, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::BBox, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::SotInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::SotInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::SotInfo, _impl_.bbox_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::SotInfo, _impl_.score_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackRequest, _impl_.init_bbox_),
        0,
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackResponse, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::core_ips::sot::TrackResponse, _impl_.result_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::core_ips::sot::BBox)},
        {12, 22, -1, sizeof(::core_ips::sot::SotInfo)},
        {24, 33, -1, sizeof(::core_ips::sot::TrackRequest)},
        {34, 44, -1, sizeof(::core_ips::sot::TrackResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::core_ips::sot::_BBox_default_instance_._instance,
    &::core_ips::sot::_SotInfo_default_instance_._instance,
    &::core_ips::sot::_TrackRequest_default_instance_._instance,
    &::core_ips::sot::_TrackResponse_default_instance_._instance,
};
const char descriptor_table_protodef_sot_5fservice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021sot_service.proto\022\014core_ips.sot\032\033googl"
    "e/protobuf/empty.proto\"\?\n\004BBox\022\013\n\003xtl\030\001 "
    "\001(\002\022\013\n\003ytl\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006heigh"
    "t\030\004 \001(\002\":\n\007SotInfo\022 \n\004bbox\030\001 \001(\0132\022.core_"
    "ips.sot.BBox\022\r\n\005score\030\002 \001(\002\"5\n\014TrackRequ"
    "est\022%\n\tinit_bbox\030\001 \001(\0132\022.core_ips.sot.BB"
    "ox\"\312\001\n\rTrackResponse\0220\n\005state\030\001 \001(\0162!.co"
    "re_ips.sot.TrackResponse.State\022%\n\006result"
    "\030\002 \001(\0132\025.core_ips.sot.SotInfo\"`\n\005State\022\010"
    "\n\004NONE\020\000\022\n\n\006NORMAL\020\001\022\017\n\013INTERRUPTED\020\002\022\030\n"
    "\024NOT_ENOUGH_RESOURCES\020\003\022\026\n\022VIDEO_DISCONN"
    "ECTED\020\0042\212\001\n\003Sot\022D\n\005Track\022\032.core_ips.sot."
    "TrackRequest\032\033.core_ips.sot.TrackRespons"
    "e\"\0000\001\022=\n\tTrackStop\022\026.google.protobuf.Emp"
    "ty\032\026.google.protobuf.Empty\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sot_5fservice_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_sot_5fservice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_sot_5fservice_2eproto = {
    false,
    false,
    596,
    descriptor_table_protodef_sot_5fservice_2eproto,
    "sot_service.proto",
    &descriptor_table_sot_5fservice_2eproto_once,
    descriptor_table_sot_5fservice_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_sot_5fservice_2eproto::offsets,
    file_level_enum_descriptors_sot_5fservice_2eproto,
    file_level_service_descriptors_sot_5fservice_2eproto,
};
namespace core_ips {
namespace sot {
const ::google::protobuf::EnumDescriptor* TrackResponse_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_sot_5fservice_2eproto);
  return file_level_enum_descriptors_sot_5fservice_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TrackResponse_State_internal_data_[] = {
    327680u, 0u, };
bool TrackResponse_State_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TrackResponse_State TrackResponse::NONE;
constexpr TrackResponse_State TrackResponse::NORMAL;
constexpr TrackResponse_State TrackResponse::INTERRUPTED;
constexpr TrackResponse_State TrackResponse::NOT_ENOUGH_RESOURCES;
constexpr TrackResponse_State TrackResponse::VIDEO_DISCONNECTED;
constexpr TrackResponse_State TrackResponse::State_MIN;
constexpr TrackResponse_State TrackResponse::State_MAX;
constexpr int TrackResponse::State_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class BBox::_Internal {
 public:
};

BBox::BBox(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core_ips.sot.BBox)
}
BBox::BBox(
    ::google::protobuf::Arena* arena, const BBox& from)
    : BBox(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE BBox::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BBox::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, xtl_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, xtl_) +
               sizeof(Impl_::height_));
}
BBox::~BBox() {
  // @@protoc_insertion_point(destructor:core_ips.sot.BBox)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BBox::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
BBox::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(BBox, _impl_._cached_size_),
              false,
          },
          &BBox::MergeImpl,
          &BBox::kDescriptorMethods,
          &descriptor_table_sot_5fservice_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> BBox::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BBox_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::core_ips::sot::BBox>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float height = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(BBox, _impl_.height_)}},
    // float xtl = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(BBox, _impl_.xtl_)}},
    // float ytl = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(BBox, _impl_.ytl_)}},
    // float width = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(BBox, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float xtl = 1;
    {PROTOBUF_FIELD_OFFSET(BBox, _impl_.xtl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ytl = 2;
    {PROTOBUF_FIELD_OFFSET(BBox, _impl_.ytl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float width = 3;
    {PROTOBUF_FIELD_OFFSET(BBox, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float height = 4;
    {PROTOBUF_FIELD_OFFSET(BBox, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:core_ips.sot.BBox)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.xtl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.xtl_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* BBox::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_ips.sot.BBox)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float xtl = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xtl = this->_internal_xtl();
  ::uint32_t raw_xtl;
  memcpy(&raw_xtl, &tmp_xtl, sizeof(tmp_xtl));
  if (raw_xtl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_xtl(), target);
  }

  // float ytl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ytl = this->_internal_ytl();
  ::uint32_t raw_ytl;
  memcpy(&raw_ytl, &tmp_ytl, sizeof(tmp_ytl));
  if (raw_ytl != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_ytl(), target);
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_ips.sot.BBox)
  return target;
}

::size_t BBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core_ips.sot.BBox)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // float xtl = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xtl = this->_internal_xtl();
  ::uint32_t raw_xtl;
  memcpy(&raw_xtl, &tmp_xtl, sizeof(tmp_xtl));
  if (raw_xtl != 0) {
    total_size += 5;
  }

  // float ytl = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ytl = this->_internal_ytl();
  ::uint32_t raw_ytl;
  memcpy(&raw_ytl, &tmp_ytl, sizeof(tmp_ytl));
  if (raw_ytl != 0) {
    total_size += 5;
  }

  // float width = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 5;
  }

  // float height = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void BBox::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BBox*>(&to_msg);
  auto& from = static_cast<const BBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:core_ips.sot.BBox)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_xtl = from._internal_xtl();
  ::uint32_t raw_xtl;
  memcpy(&raw_xtl, &tmp_xtl, sizeof(tmp_xtl));
  if (raw_xtl != 0) {
    _this->_impl_.xtl_ = from._impl_.xtl_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_ytl = from._internal_ytl();
  ::uint32_t raw_ytl;
  memcpy(&raw_ytl, &tmp_ytl, sizeof(tmp_ytl));
  if (raw_ytl != 0) {
    _this->_impl_.ytl_ = from._impl_.ytl_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  ::uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core_ips.sot.BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BBox::InternalSwap(BBox* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox, _impl_.height_)
      + sizeof(BBox::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(BBox, _impl_.xtl_)>(
          reinterpret_cast<char*>(&_impl_.xtl_),
          reinterpret_cast<char*>(&other->_impl_.xtl_));
}

::google::protobuf::Metadata BBox::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SotInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SotInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SotInfo, _impl_._has_bits_);
};

SotInfo::SotInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core_ips.sot.SotInfo)
}
inline PROTOBUF_NDEBUG_INLINE SotInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::core_ips::sot::SotInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SotInfo::SotInfo(
    ::google::protobuf::Arena* arena,
    const SotInfo& from)
    : ::google::protobuf::Message(arena) {
  SotInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bbox_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::core_ips::sot::BBox>(
                              arena, *from._impl_.bbox_)
                        : nullptr;
  _impl_.score_ = from._impl_.score_;

  // @@protoc_insertion_point(copy_constructor:core_ips.sot.SotInfo)
}
inline PROTOBUF_NDEBUG_INLINE SotInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SotInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bbox_),
           0,
           offsetof(Impl_, score_) -
               offsetof(Impl_, bbox_) +
               sizeof(Impl_::score_));
}
SotInfo::~SotInfo() {
  // @@protoc_insertion_point(destructor:core_ips.sot.SotInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SotInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.bbox_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SotInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SotInfo, _impl_._cached_size_),
              false,
          },
          &SotInfo::MergeImpl,
          &SotInfo::kDescriptorMethods,
          &descriptor_table_sot_5fservice_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SotInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SotInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SotInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::core_ips::sot::SotInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float score = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.score_)}},
    // .core_ips.sot.BBox bbox = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.bbox_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .core_ips.sot.BBox bbox = 1;
    {PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.bbox_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float score = 2;
    {PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::core_ips::sot::BBox>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:core_ips.sot.SotInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bbox_ != nullptr);
    _impl_.bbox_->Clear();
  }
  _impl_.score_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SotInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_ips.sot.SotInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .core_ips.sot.BBox bbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.bbox_, _impl_.bbox_->GetCachedSize(), target, stream);
  }

  // float score = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_ips.sot.SotInfo)
  return target;
}

::size_t SotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core_ips.sot.SotInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // .core_ips.sot.BBox bbox = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bbox_);
  }

  // float score = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SotInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SotInfo*>(&to_msg);
  auto& from = static_cast<const SotInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:core_ips.sot.SotInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bbox_ != nullptr);
    if (_this->_impl_.bbox_ == nullptr) {
      _this->_impl_.bbox_ =
          ::google::protobuf::Message::CopyConstruct<::core_ips::sot::BBox>(arena, *from._impl_.bbox_);
    } else {
      _this->_impl_.bbox_->MergeFrom(*from._impl_.bbox_);
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  ::uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_impl_.score_ = from._impl_.score_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SotInfo::CopyFrom(const SotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core_ips.sot.SotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SotInfo::InternalSwap(SotInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.score_)
      + sizeof(SotInfo::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(SotInfo, _impl_.bbox_)>(
          reinterpret_cast<char*>(&_impl_.bbox_),
          reinterpret_cast<char*>(&other->_impl_.bbox_));
}

::google::protobuf::Metadata SotInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackRequest, _impl_._has_bits_);
};

TrackRequest::TrackRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core_ips.sot.TrackRequest)
}
inline PROTOBUF_NDEBUG_INLINE TrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::core_ips::sot::TrackRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrackRequest::TrackRequest(
    ::google::protobuf::Arena* arena,
    const TrackRequest& from)
    : ::google::protobuf::Message(arena) {
  TrackRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.init_bbox_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::core_ips::sot::BBox>(
                              arena, *from._impl_.init_bbox_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:core_ips.sot.TrackRequest)
}
inline PROTOBUF_NDEBUG_INLINE TrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrackRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.init_bbox_ = {};
}
TrackRequest::~TrackRequest() {
  // @@protoc_insertion_point(destructor:core_ips.sot.TrackRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrackRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.init_bbox_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TrackRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TrackRequest, _impl_._cached_size_),
              false,
          },
          &TrackRequest::MergeImpl,
          &TrackRequest::kDescriptorMethods,
          &descriptor_table_sot_5fservice_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TrackRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrackRequest_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::core_ips::sot::TrackRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .core_ips.sot.BBox init_bbox = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackRequest, _impl_.init_bbox_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .core_ips.sot.BBox init_bbox = 1;
    {PROTOBUF_FIELD_OFFSET(TrackRequest, _impl_.init_bbox_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::core_ips::sot::BBox>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:core_ips.sot.TrackRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.init_bbox_ != nullptr);
    _impl_.init_bbox_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* TrackRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_ips.sot.TrackRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .core_ips.sot.BBox init_bbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.init_bbox_, _impl_.init_bbox_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_ips.sot.TrackRequest)
  return target;
}

::size_t TrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core_ips.sot.TrackRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .core_ips.sot.BBox init_bbox = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.init_bbox_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TrackRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackRequest*>(&to_msg);
  auto& from = static_cast<const TrackRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:core_ips.sot.TrackRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.init_bbox_ != nullptr);
    if (_this->_impl_.init_bbox_ == nullptr) {
      _this->_impl_.init_bbox_ =
          ::google::protobuf::Message::CopyConstruct<::core_ips::sot::BBox>(arena, *from._impl_.init_bbox_);
    } else {
      _this->_impl_.init_bbox_->MergeFrom(*from._impl_.init_bbox_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackRequest::CopyFrom(const TrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core_ips.sot.TrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackRequest::InternalSwap(TrackRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.init_bbox_, other->_impl_.init_bbox_);
}

::google::protobuf::Metadata TrackRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_._has_bits_);
};

TrackResponse::TrackResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core_ips.sot.TrackResponse)
}
inline PROTOBUF_NDEBUG_INLINE TrackResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::core_ips::sot::TrackResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TrackResponse::TrackResponse(
    ::google::protobuf::Arena* arena,
    const TrackResponse& from)
    : ::google::protobuf::Message(arena) {
  TrackResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::core_ips::sot::SotInfo>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.state_ = from._impl_.state_;

  // @@protoc_insertion_point(copy_constructor:core_ips.sot.TrackResponse)
}
inline PROTOBUF_NDEBUG_INLINE TrackResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TrackResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, state_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::state_));
}
TrackResponse::~TrackResponse() {
  // @@protoc_insertion_point(destructor:core_ips.sot.TrackResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TrackResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TrackResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_._cached_size_),
              false,
          },
          &TrackResponse::MergeImpl,
          &TrackResponse::kDescriptorMethods,
          &descriptor_table_sot_5fservice_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TrackResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrackResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::core_ips::sot::TrackResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .core_ips.sot.SotInfo result = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.result_)}},
    // .core_ips.sot.TrackResponse.State state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrackResponse, _impl_.state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .core_ips.sot.TrackResponse.State state = 1;
    {PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .core_ips.sot.SotInfo result = 2;
    {PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::core_ips::sot::SotInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TrackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:core_ips.sot.TrackResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* TrackResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core_ips.sot.TrackResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .core_ips.sot.TrackResponse.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .core_ips.sot.SotInfo result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.result_, _impl_.result_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core_ips.sot.TrackResponse)
  return target;
}

::size_t TrackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core_ips.sot.TrackResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // .core_ips.sot.SotInfo result = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.result_);
  }

  // .core_ips.sot.TrackResponse.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TrackResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackResponse*>(&to_msg);
  auto& from = static_cast<const TrackResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:core_ips.sot.TrackResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::core_ips::sot::SotInfo>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  if (from._internal_state() != 0) {
    _this->_impl_.state_ = from._impl_.state_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackResponse::CopyFrom(const TrackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core_ips.sot.TrackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackResponse::InternalSwap(TrackResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.state_)
      + sizeof(TrackResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(TrackResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata TrackResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace sot
}  // namespace core_ips
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_sot_5fservice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
